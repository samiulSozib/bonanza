<%- include('../partials/navigation.ejs') %>



    <!-- Right Side Section -->
    <div class="ml-auto w-full xl:w-5/6 px-0 xl:px-5 py-2 mt-16 xl:mt-0">


       <!-- Project Overview Header -->

        <!-- <section class="flex items-center justify-between px-5 py-2 xl:py-5 gap-4"> -->
            
            <!-- <p class="text-lg font-bold text-tColor2">Product List</p> -->

            <!-- Notification & User -->
            <!-- <div class="text-xs xl:text-base flex items-center gap-3 xl:gap-5">
                
                <a class="" href="#">
                  <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M20.9766 12.5883V17.255C20.9766 17.5583 20.9649 17.85 20.9299 18.13C20.6616 21.28 18.8066 22.8433 15.3883 22.8433H14.9216C14.6299 22.8433 14.3499 22.9833 14.1749 23.2167L12.7749 25.0833C12.1566 25.9117 11.1533 25.9117 10.5349 25.0833L9.1349 23.2167C8.98324 23.0183 8.64492 22.8433 8.38825 22.8433H7.9216C4.19993 22.8433 2.33325 21.9217 2.33325 17.255V12.5883C2.33325 9.17001 3.90826 7.31501 7.0466 7.04668C7.3266 7.01168 7.61826 7 7.9216 7H15.3883C19.1099 7 20.9766 8.86668 20.9766 12.5883Z" stroke="#7C7C7C" stroke-width="1.5" stroke-miterlimit="10" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M25.6433 7.9216V12.5883C25.6433 16.0183 24.0683 17.8616 20.93 18.1299C20.965 17.8499 20.9766 17.5583 20.9766 17.2549V12.5883C20.9766 8.8666 19.11 6.99992 15.3883 6.99992H7.92163C7.6183 6.99992 7.32663 7.0116 7.04663 7.0466C7.31496 3.90826 9.16996 2.33325 12.5883 2.33325H20.055C23.7766 2.33325 25.6433 4.19993 25.6433 7.9216Z" stroke="#7C7C7C" stroke-width="1.5" stroke-miterlimit="10" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M15.7448 15.4583H15.7553" stroke="#7C7C7C" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M11.6613 15.4583H11.6718" stroke="#7C7C7C" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M7.57808 15.4583H7.58858" stroke="#7C7C7C" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                    
                </a>

                <a class="" href="#">
                  <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M14 7.51343V11.3984" stroke="black" stroke-width="1.5" stroke-miterlimit="10" stroke-linecap="round"/>
                    <path d="M14.0232 2.33325C9.72988 2.33325 6.25321 5.80992 6.25321 10.1033V12.5533C6.25321 13.3466 5.92655 14.5366 5.51821 15.2133L4.03655 17.6866C3.12655 19.2149 3.75655 20.9183 5.43655 21.4783C11.0132 23.3333 17.0449 23.3333 22.6215 21.4783C24.1965 20.9533 24.8732 19.1099 24.0215 17.6866L22.5399 15.2133C22.1315 14.5366 21.8049 13.3349 21.8049 12.5533V10.1033C21.7932 5.83325 18.2932 2.33325 14.0232 2.33325Z" stroke="black" stroke-width="1.5" stroke-miterlimit="10" stroke-linecap="round"/>
                    <path d="M17.885 21.9568C17.885 24.0918 16.135 25.8418 14 25.8418C12.9383 25.8418 11.9583 25.3985 11.2583 24.6985C10.5583 23.9985 10.115 23.0185 10.115 21.9568" stroke="black" stroke-width="1.5" stroke-miterlimit="10"/>
                    </svg>
                    
                </a>

            </div> -->
            
        <!-- </section> -->

      
        <section class="mx-5 rounded-md border-b-2">

          <div class="flex xl:flex-row xl:items-center justify-between py-4 gap-4">

            <!-- Search Box -->
            <div class="bg-white relative">
              <p class="text-lg font-bold text-tColor2">Product List</p>

              <!-- <input class="py-2 pr-7 pl-3 focus:outline-none max-w-[180px]" type="text" placeholder="Search...">
              <i class="fa-solid fa-magnifying-glass absolute top-1/2 right-2 -translate-y-1/2 text-tColor"></i>
             -->
            </div>

            <a class="flex items-center gap-3 text-tColor border-green-300 hover:bg-primaryColor hover:text-white border-2 rounded px-3 py-1" href="/dashboard/addProduct">
              <p>Add Product</p>
              <i class="fa-solid fa-plus"></i>
            </a>
          </div>
          
        </section>



        <section id="productList" class="px-5 py-5 grid grid-cols-3 sm:grid-cols-3 md:grid-cols-3 xl:grid-cols-3 gap-10">



          <!-- <div id="productList">
            
          </div> -->

          
    

        </section>
    

    </div>

</section>





<!-- Header Section Script -->
<script> 
  // Menu toggle button 
    const toggleButton = document.getElementById("toggle-button");
    const toggleMenu = document.getElementById("toggle-menu");
    var toggleCounter = 1;
    toggleButton.onclick = function () {
      toggleCounter++;
      if(toggleCounter%2 == 0){
        toggleMenu.classList.remove("hidden");
        toggleMenu.classList.add("grid");
      }
      else{
        toggleMenu.classList.remove("grid");
        toggleMenu.classList.add("hidden");
      }
    }


  </script>


<!-- Accordion Script -->
<script>
  const accordionButtons = document.querySelectorAll('.accordion-button');
  const accordionMenu = document.querySelectorAll('.menu-collapse');

  accordionButtons.forEach(button => {
    button.addEventListener('click', () => {
      const accordionCollapse = button.nextElementSibling;
      button.setAttribute('aria-expanded', button.getAttribute('aria-expanded') === 'false' ? 'true' : 'false');
      accordionCollapse.classList.toggle('hidden');
    });
  });

  // Set all accordion items to collapsed state by default
  document.querySelectorAll('.menu-collapse').forEach(collapse => {
    collapse.classList.add('hidden');
  });


</script>


<!-- Table Script -->
<script>
  const tableButtons = document.querySelectorAll('.table-button');
  const tableMenu = document.querySelectorAll('.table-collapse');
  const tableClose = document.querySelectorAll('.table-close');

  tableButtons.forEach(button => {
    button.addEventListener('click', () => {
      const tableCollapse = button.nextElementSibling;
      button.setAttribute('aria-expanded', button.getAttribute('aria-expanded') === 'false' ? 'true' : 'false');
      tableCollapse.classList.toggle('hidden');
    });
  });

  tableClose.forEach(button => {
    button.addEventListener('click', () => {
      const tableCollapse = button.parentElement.parentElement.parentElement;
      button.setAttribute('aria-expanded', button.getAttribute('aria-expanded') === 'false' ? 'true' : 'false');
      tableCollapse.classList.toggle('hidden');
    });
  });

</script>

<script>
  const tables = document.querySelectorAll('.table-collapse');
  window.onclick = function (event) {
  for (let table of tables){
  if (event.target == table) {
    table.classList.toggle('hidden');
  }
}
};
</script>




<script>
  function showSubcategories(categoryId) {
  const subcategoryList = document.getElementById(`subcategory-list-${categoryId}`);
  subcategoryList.classList.remove('hidden');
  }

  function hideSubcategories(categoryId) {
  const subcategoryList = document.getElementById(`subcategory-list-${categoryId}`);
  subcategoryList.classList.add('hidden');
  }
</script>

		<!-- for category -->
		<script>
			async function fetchProducts() {
			try {
				const response = await fetch('/api/client/products'); // Replace '/api/products' with your API endpoint
				const data = await response.json();
				return data;
			} catch (error) {
				console.error('Error fetching products:', error);
				return [];
			}
			}
		
			async function displayProducts(selectedCategory) {
				
			const productListContainer = document.getElementById('productList');
			productListContainer.innerHTML = '';
		
			try {
				const products = await fetchProducts();
				const filteredProducts = selectedCategory === 'all'
				? products // Show all products when 'All Subcategories' is selected
				: products.filter(product => product.cat_id == selectedCategory);
		
				filteredProducts.forEach(product => {
					const productDiv = document.createElement('div');
              productDiv.classList.add('flex', 'flex-col', 'gap-y-4');

              // Create and set Product Model text
              const productModel = document.createElement('p');
              productModel.classList.add('text-tColor2');
              productModel.textContent = 'Product Model';

              const productModelValue = document.createElement('p');
              productModelValue.classList.add('text-xl', 'font-semibold', 'border-b-2', 'pt-1', 'pb-5');
              productModelValue.textContent = product.product_model;

              // Create and set Category Name text
              const categoryName = document.createElement('p');
              categoryName.classList.add('text-primaryColor', 'font-bold', 'text-sm');
              categoryName.textContent = product.category_name;

              // Create video or image element based on condition
              const mediaContainer = document.createElement('div');
              mediaContainer.classList.add('h-40', 'w-full', 'flex', 'justify-center', 'items-center', 'mt-3', 'overflow-hidden');

              if (product.video[0].video_id) {
                const video = document.createElement('video');
                video.setAttribute('controls', true);

                const source = document.createElement('source');
                source.setAttribute('src', product.video[0].video);
                source.setAttribute('type', 'video/mp4');

                video.appendChild(source);
                mediaContainer.appendChild(video);
              } else {
                const image = document.createElement('img');
                image.setAttribute('src', product.images[0].image);
                image.setAttribute('alt', '');
                image.classList.add('w-full');

                mediaContainer.appendChild(image);
              }

              // Create and set Product Name text
              const productName = document.createElement('p');
              productName.classList.add('text-lg');
              productName.textContent = product.product_name;

              // Create and set FOB Price text
              const fobPrice = document.createElement('p');
              fobPrice.classList.add('border-b-2', 'pb-3');
              fobPrice.textContent = product.fob_price;

              // Create buttons div
              const buttonsDiv = document.createElement('div');
              buttonsDiv.classList.add('grid', 'grid-cols-2', 'mt-3', 'gap-3');

              // Create and set Hide button
              // const hideButton = document.createElement('button');
              // hideButton.classList.add('bg-gray-200', 'px-2', 'py-1', 'rounded');
              // hideButton.textContent = 'Hide';

              // Create and set Unhide button
              // const unhideButton = document.createElement('button');
              // unhideButton.classList.add('bg-primaryColor', 'text-white', 'px-2', 'py-1', 'rounded');
              // unhideButton.textContent = 'Unhide';

              // Create and set Edit button
              const editButton = document.createElement('button');
              editButton.classList.add('bg-green-500', 'text-white', 'px-2', 'py-1', 'rounded');
              const editLink = document.createElement('a');
              editLink.setAttribute('href', `/dashboard/editProduct/${product.id}`);
              editLink.textContent = 'Edit';
              editButton.appendChild(editLink);

              // Create and set Delete button
              const deleteButton = document.createElement('a');
              deleteButton.classList.add('delete-product', 'bg-red-800', 'text-white', 'px-2', 'py-1', 'rounded');
              deleteButton.setAttribute('data-product-id', product.id);
              deleteButton.setAttribute('href', '#');
              deleteButton.textContent = 'Delete';

              // Append all elements to the productDiv
              productDiv.appendChild(productModel);
              productDiv.appendChild(productModelValue);
              productDiv.appendChild(categoryName);
              productDiv.appendChild(mediaContainer);
              productDiv.appendChild(productName);
              productDiv.appendChild(fobPrice);
              // buttonsDiv.appendChild(hideButton);
              // buttonsDiv.appendChild(unhideButton);
              buttonsDiv.appendChild(editButton);
              buttonsDiv.appendChild(deleteButton);
              productDiv.appendChild(buttonsDiv);

              // Append the productDiv to the productListContainer
              productListContainer.appendChild(productDiv);

				});
			} catch (error) {
				console.error('Error displaying products:', error);
			}
			}
		
			// function toggleSubcategories(categoryId) {
			// const subcategoryList = document.getElementById(`subcategory-list-${categoryId}`);
			// subcategoryList.classList.toggle('hidden');
			// }
		
			// Initial display with all products
			displayProducts('all');
		</script>



		<!-- for sub category -->

		<script>
			async function fetchProducts() {
			try {
				const response = await fetch('/api/client/products'); // Replace '/api/products' with your API endpoint
				const data = await response.json();
				return data;
			} catch (error) {
				console.error('Error fetching products:', error);
				return [];
			}
			}

			async function displaySubcategoryProducts(selectedSubCategory) {
				
			const productListContainer = document.getElementById('productList');
			productListContainer.innerHTML = '';

			try {
				const products = await fetchProducts();
				const filteredProducts = selectedSubCategory === 'all'
				? products // Show all products when 'All Subcategories' is selected
				: products.filter(product => product.subCat_id == selectedSubCategory);

				filteredProducts.forEach(product => {
					const productDiv = document.createElement('div');
              productDiv.classList.add('flex', 'flex-col', 'gap-y-4');

              // Create and set Product Model text
              const productModel = document.createElement('p');
              productModel.classList.add('text-tColor2');
              productModel.textContent = 'Product Model';

              const productModelValue = document.createElement('p');
              productModelValue.classList.add('text-xl', 'font-semibold', 'border-b-2', 'pt-1', 'pb-5');
              productModelValue.textContent = product.product_model;

              // Create and set Category Name text
              const categoryName = document.createElement('p');
              categoryName.classList.add('text-primaryColor', 'font-bold', 'text-sm');
              categoryName.textContent = product.category_name;

              // Create video or image element based on condition
              const mediaContainer = document.createElement('div');
              mediaContainer.classList.add('h-40', 'w-full', 'flex', 'justify-center', 'items-center', 'mt-3', 'overflow-hidden');

              if (product.video[0].video_id) {
                const video = document.createElement('video');
                video.setAttribute('controls', true);

                const source = document.createElement('source');
                source.setAttribute('src', product.video[0].video);
                source.setAttribute('type', 'video/mp4');

                video.appendChild(source);
                mediaContainer.appendChild(video);
              } else {
                const image = document.createElement('img');
                image.setAttribute('src', product.images[0].image);
                image.setAttribute('alt', '');
                image.classList.add('w-full');

                mediaContainer.appendChild(image);
              }

              // Create and set Product Name text
              const productName = document.createElement('p');
              productName.classList.add('text-lg');
              productName.textContent = product.product_name;

              // Create and set FOB Price text
              const fobPrice = document.createElement('p');
              fobPrice.classList.add('border-b-2', 'pb-3');
              fobPrice.textContent = product.fob_price;

              // Create buttons div
              const buttonsDiv = document.createElement('div');
              buttonsDiv.classList.add('grid', 'grid-cols-2', 'mt-3', 'gap-3');

              // Create and set Hide button
              // const hideButton = document.createElement('button');
              // hideButton.classList.add('bg-gray-200', 'px-2', 'py-1', 'rounded');
              // hideButton.textContent = 'Hide';

              // Create and set Unhide button
              // const unhideButton = document.createElement('button');
              // unhideButton.classList.add('bg-primaryColor', 'text-white', 'px-2', 'py-1', 'rounded');
              // unhideButton.textContent = 'Unhide';

              // Create and set Edit button
              const editButton = document.createElement('button');
              editButton.classList.add('bg-green-500', 'text-white', 'px-2', 'py-1', 'rounded');
              const editLink = document.createElement('a');
              editLink.setAttribute('href', `/dashboard/editProduct/${product.id}`);
              editLink.textContent = 'Edit';
              editButton.appendChild(editLink);

              // Create and set Delete button
              const deleteButton = document.createElement('a');
              deleteButton.classList.add('delete-product', 'bg-red-800', 'text-white', 'px-2', 'py-1', 'rounded');
              deleteButton.setAttribute('data-product-id', product.id);
              deleteButton.setAttribute('href', '#');
              deleteButton.textContent = 'Delete';

              // Append all elements to the productDiv
              productDiv.appendChild(productModel);
              productDiv.appendChild(productModelValue);
              productDiv.appendChild(categoryName);
              productDiv.appendChild(mediaContainer);
              productDiv.appendChild(productName);
              productDiv.appendChild(fobPrice);
              // buttonsDiv.appendChild(hideButton);
              // buttonsDiv.appendChild(unhideButton);
              buttonsDiv.appendChild(editButton);
              buttonsDiv.appendChild(deleteButton);
              productDiv.appendChild(buttonsDiv);

              // Append the productDiv to the productListContainer
              productListContainer.appendChild(productDiv);
				});
			} catch (error) {
				console.error('Error displaying products:', error);
			}
			}

			// function toggleSubcategories(categoryId) {
			// const subcategoryList = document.getElementById(`subcategory-list-${categoryId}`);
			// subcategoryList.classList.toggle('hidden');
			// }

			// Initial display with all products
		</script>


<!-- delete product -->

<!-- Add this JavaScript code to your HTML file -->

<script>
  // Function to delete a product
  async function deleteProduct(productId) {
    try {
      const response = await fetch(`/api/admin/deleteProduct/${productId}`, {
        method: 'DELETE',
      });

      if (response.ok) {
        console.log('Product deleted successfully.');

        // Refresh the product list after deletion
        displayProducts('all');
      } else {
        console.error('Failed to delete product.');
      }
    } catch (error) {
      console.error('Error deleting product:', error);
    }
  }

  // Add an event listener to the form element
  document.addEventListener('click', function (event) {
  if (event.target.classList.contains('delete-product')) {
    event.preventDefault(); // Prevent the default link behavior

    const productId = event.target.getAttribute('data-product-id');

    const confirmed = confirm('Are you sure you want to delete this Product?');

    if (confirmed) {
      deleteProduct(productId);
    }
  }
});
</script>


<!-- delete product -->

</body>
</html>